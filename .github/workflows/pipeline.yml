name: Deploy Alexander FrontEnd

on:
  pull_request:
    types: [closed]

jobs:
  build:
    runs-on: ubuntu-20.04

    if: github.event.pull_request.merged == true && github.event.pull_request.merged_by != null

    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    steps:
      - name: Checkout Files
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          echo "${{ secrets.DOCKERFILE }}" > Dockerfile
          echo "${{ secrets.ENV_GLOBAL }}" > .env
          docker build -t $(basename ${{ github.repository }} | tr '[:upper:]' '[:lower:]'):1.0 .

      - name: Save Docker image as tar file
        run: docker save -o $(basename ${{ github.repository }} | tr '[:upper:]' '[:lower:]').tar $(basename ${{ github.repository }} | tr '[:upper:]' '[:lower:]'):1.0

      - name: DELETE FILES
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_SERVER_ADDRESS }}
          username: ${{ secrets.REMOTE_SERVER_USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            cd ~/${{secrets.REMOTE_SERVER_PATH}}
            for file in "$(basename ${{ github.repository }} | tr '[:upper:]' '[:lower:]').tar" ".env" "docker-compose.yaml"; do
              if [ -f "$file" ]; then
                rm -f "$file"
              else
                echo "File $file does not exist."
              fi
            done
            if [ "$(docker ps -a -q -f name=${{ secrets.NAME_CONTAINER }})" ]; then 
              docker rm -f ${{ secrets.NAME_CONTAINER }}
            else
              echo "Container ${{ secrets.NAME_CONTAINER }} does not exist."
            fi
            if [ "$(docker images -q $(basename ${{ github.repository }} | tr '[:upper:]' '[:lower:]'):1.0)" ]; then
              docker rmi -f $(basename ${{ github.repository }} | tr '[:upper:]' '[:lower:]'):1.0
            else
              echo "Image ${{secrets.APPFRONT}}:1.0 does not exist."
            fi

      - name: Create docker-compose.yaml file
        run: |
          echo "${{ secrets.DOCKER_COMPOSE }}" > docker-compose.yaml

      - name: Transfer Docker image to remote server AND create repositorio
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          scp -o StrictHostKeyChecking=no $(basename ${{ github.repository }} | tr '[:upper:]' '[:lower:]').tar ${{ secrets.REMOTE_SERVER_USERNAME }}@${{ secrets.REMOTE_SERVER_ADDRESS }}:${{ secrets.REMOTE_SERVER_PATH }}
          scp -o StrictHostKeyChecking=no docker-compose.yaml ${{ secrets.REMOTE_SERVER_USERNAME }}@${{ secrets.REMOTE_SERVER_ADDRESS }}:${{ secrets.REMOTE_SERVER_PATH }}
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_SERVER_USERNAME }}@${{ secrets.REMOTE_SERVER_ADDRESS }} << "ENDSSH"
          docker load -i ${{ secrets.REMOTE_SERVER_PATH }}/$(basename ${{ github.repository }} | tr '[:upper:]' '[:lower:]').tar
          docker compose -f ${{ secrets.REMOTE_SERVER_PATH }}/docker-compose.yaml up -d
          ENDSSH

      - name: Notify Slack
        uses: act10ns/slack@v2
        if: success()
        with:
          channel: "#deploy-web"
          status: success
          msg_color: "#FF0000"
          title: "Build Failed"
          steps: ${{ toJson(steps) }}
          message: |
            "¡Excelente noticia! 🎉 La acción de GitHub en [Nombre del repositorio] se completó con éxito. Todo está en orden y listo para seguir adelante."

      - name: Notify Slack
        if: failure()
        uses: act10ns/slack@v2
        with:
          channel: "#deploy-web"
          status: failure # Add the status parameter
          msg_color: "#FF0000"
          title: "Build Failed"
          steps: ${{ toJson(steps) }}
          message: |
            "¡Atención! 😞 Se encontraron errores en la ejecución de la acción de GitHub en [Nombre del repositorio]. Por favor, revisa el registro de GitHub Actions para obtener más detalles y solucionar el problema."
